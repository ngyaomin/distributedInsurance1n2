'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/components/Header.js';


var ThisComponent = function (_Component) {
  (0, _inherits3.default)(ThisComponent, _Component);

  function ThisComponent(props) {
    (0, _classCallCheck3.default)(this, ThisComponent);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ThisComponent.__proto__ || (0, _getPrototypeOf2.default)(ThisComponent)).call(this, props));

    _this.copyCodeToClipboard = function () {
      var el = _this.textArea;
      el.select();
      document.execCommand("copy");
      _this.setState({ copySuccess: true });
    };

    _this.state = {
      copySuccess: false
    };
    return _this;
  }

  (0, _createClass3.default)(ThisComponent, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(_semanticUiReact.Menu, { style: { marginTop: '10px' }, __source: {
          fileName: _jsxFileName,
          lineNumber: 23
        }
      }, _react2.default.createElement(_routes.Link, { route: 'https://ethereum.org/en/', __source: {
          fileName: _jsxFileName,
          lineNumber: 24
        }
      }, _react2.default.createElement('a', { className: 'item', target: '_blank', __source: {
          fileName: _jsxFileName,
          lineNumber: 25
        }
      }, _react2.default.createElement('i', { 'class': 'ethereum icon', __source: {
          fileName: _jsxFileName,
          lineNumber: 26
        }
      }))), _react2.default.createElement(_routes.Link, { route: '/', __source: {
          fileName: _jsxFileName,
          lineNumber: 29
        }
      }, _react2.default.createElement('a', { className: 'item', __source: {
          fileName: _jsxFileName,
          lineNumber: 30
        }
      }, _react2.default.createElement('img', { src: '../components/smallSafetyPin.png', __source: {
          fileName: _jsxFileName,
          lineNumber: 31
        }
      }))), _react2.default.createElement(_routes.Link, { route: '/', __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }, _react2.default.createElement('a', { className: 'item', __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }, _react2.default.createElement('b', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      }, 'Safety Pin'), ', a Decentralize Peace Of Mind Platform')), _react2.default.createElement('button', { className: 'item', onClick: function onClick() {
          return _this2.copyCodeToClipboard();
        }, __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      }, _react2.default.createElement('b', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, 'Donate Eths to >>> Click here to Copy')), _react2.default.createElement('div', { className: 'item', __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      }, _react2.default.createElement('textarea', {
        ref: function ref(textarea) {
          return _this2.textArea = textarea;
        },
        value: '0xa85A05887Ae1f8f4Ce2Ce102c20d4aAFD1273981' // this my public key pls copy and send $ to me thanks
        , __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      })), _react2.default.createElement(_semanticUiReact.Menu.Menu, { position: 'right', __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, _react2.default.createElement(_routes.Link, { route: '/', __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }, _react2.default.createElement('a', { className: 'item', __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'Insurance Pools')), _react2.default.createElement(_routes.Link, { route: '/insurancepools/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }, _react2.default.createElement('a', { className: 'item', __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, '+'))));
    }
  }]);

  return ThisComponent;
}(_react.Component);

exports.default = ThisComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiVGhpc0NvbXBvbmVudCIsIl9Db21wb25lbnQiLCJwcm9wcyIsIl90aGlzIiwiX19wcm90b19fIiwiY2FsbCIsImNvcHlDb2RlVG9DbGlwYm9hcmQiLCJlbCIsInRleHRBcmVhIiwic2VsZWN0IiwiZG9jdW1lbnQiLCJleGVjQ29tbWFuZCIsInNldFN0YXRlIiwiY29weVN1Y2Nlc3MiLCJzdGF0ZSIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiX3RoaXMyIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwibWFyZ2luVG9wIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyb3V0ZSIsImNsYXNzTmFtZSIsInRhcmdldCIsInNyYyIsIm9uQ2xpY2siLCJyZWYiLCJ0ZXh0YXJlYSIsIk1lbnUiLCJwb3NpdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFIQSxJQUFJQSxlQUFlLHlEQUFuQjs7O0FBS0EsSUFBSUMsZ0JBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDeEMsMEJBQVVELGFBQVYsRUFBeUJDLFVBQXpCOztBQUVBLFdBQVNELGFBQVQsQ0FBdUJFLEtBQXZCLEVBQThCO0FBQzVCLGtDQUFnQixJQUFoQixFQUFzQkYsYUFBdEI7O0FBRUEsUUFBSUcsUUFBUSx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0gsY0FBY0ksU0FBZCxJQUEyQiw4QkFBdUJKLGFBQXZCLENBQTVCLEVBQW1FSyxJQUFuRSxDQUF3RSxJQUF4RSxFQUE4RUgsS0FBOUUsQ0FBakMsQ0FBWjs7QUFFQUMsVUFBTUcsbUJBQU4sR0FBNEIsWUFBWTtBQUN0QyxVQUFJQyxLQUFLSixNQUFNSyxRQUFmO0FBQ0FELFNBQUdFLE1BQUg7QUFDQUMsZUFBU0MsV0FBVCxDQUFxQixNQUFyQjtBQUNBUixZQUFNUyxRQUFO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