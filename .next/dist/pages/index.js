'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/pages/index.js?entry';


var InsurancePoolIndex = function (_Component) {
  (0, _inherits3.default)(InsurancePoolIndex, _Component);

  function InsurancePoolIndex() {
    (0, _classCallCheck3.default)(this, InsurancePoolIndex);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolIndex.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolIndex, [{
    key: 'renderInsurancePools',
    value: function renderInsurancePools() {
      var items = this.props.insurancePools.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement('div', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          }, _react2.default.createElement('i', { 'class': 'hand point right outline icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          }), _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          }, _react2.default.createElement('b', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          }, _react2.default.createElement('mark', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          }, 'View Insurance Pool')))), '\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0', _react2.default.createElement('i', { 'class': 'ethereum icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          }), _react2.default.createElement(_routes.Link, { route: 'https://rinkeby.etherscan.io/address/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          }, _react2.default.createElement('a', { target: '_blank', __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }, 'View in Ether Scan'))),
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, 'Open Insurance Pools'), _react2.default.createElement(_routes.Link, { route: '/insurancepools/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Create InsurancePool',
        icon: 'add circle' // the icon name is in document, be exact
        , primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }))), this.renderInsurancePools()));
    }
  }], [{
    key: 'getInitialProps',

    // creating a instance of class to get access to
    // static asign the function not to instance of the class but to class itself

    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var insurancePools;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedInsurancePools().call();

              case 2:
                insurancePools = _context.sent;
                return _context.abrupt('return', { insurancePools: insurancePools });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolIndex;
}(_react.Component);

exports.default = InsurancePoolIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJJbnN1cmFuY2VQb29scyIsIml0ZW1zIiwicHJvcHMiLCJpbnN1cmFuY2VQb29scyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwidGFyZ2V0IiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImZsb2F0ZWQiLCJjb250ZW50IiwiaWNvbiIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwibWV0aG9kcyIsImdldERlcGxveWVkSW5zdXJhbmNlUG9vbHMiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFMQSxJQUFJQSxlQUFlLHlEQUFuQjs7O0FBT0EsSUFBSUMscUJBQXFCLFVBQVVDLFVBQVYsRUFBc0I7QUFDN0MsMEJBQVVELGtCQUFWLEVBQThCQyxVQUE5Qjs7QUFFQSxXQUFTRCxrQkFBVCxHQUE4QjtBQUM1QixrQ0FBZ0IsSUFBaEIsRUFBc0JBLGtCQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxtQkFBbUJFLFNBQW5CLElBQWdDLDhCQUF1QkYsa0JBQXZCLENBQWpDLEVBQTZFRyxLQUE3RSxDQUFtRixJQUFuRixFQUF5RkMsU0FBekYsQ0FBakMs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