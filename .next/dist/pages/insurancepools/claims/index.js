'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../../../routes');

var _insurancePool = require('../../../ethereum/insurancePool');

var _insurancePool2 = _interopRequireDefault(_insurancePool);

var _ClaimRow = require('../../../components/ClaimRow');

var _ClaimRow2 = _interopRequireDefault(_ClaimRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/pages/insurancepools/claims/index.js?entry';


var ClaimIndex = function (_Component) {
  (0, _inherits3.default)(ClaimIndex, _Component);

  function ClaimIndex() {
    (0, _classCallCheck3.default)(this, ClaimIndex);

    return (0, _possibleConstructorReturn3.default)(this, (ClaimIndex.__proto__ || (0, _getPrototypeOf2.default)(ClaimIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(ClaimIndex, [{
    key: 'renderRows',
    value: function renderRows() {
      var _this2 = this;

      return this.props.claims.map(function (claim, index) {
        return _react2.default.createElement(_ClaimRow2.default, {
          key: index,
          id: index,
          claim: claim,
          address: _this2.props.address,
          validatorsCount: _this2.props.validatorsCount,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 30
          }
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var Header = _semanticUiReact.Table.Header,
          Row = _semanticUiReact.Table.Row,
          HeaderCell = _semanticUiReact.Table.HeaderCell,
          Body = _semanticUiReact.Table.Body;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      }, 'Claims List'), _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + this.props.address + '/claims/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, floated: 'right', style: { marginBottom: 10 }, __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'Add a Claim'))), _react2.default.createElement(_semanticUiReact.Table, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, _react2.default.createElement(Header, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, _react2.default.createElement(Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }, _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }, 'ID'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, 'Description'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, 'Amount Claim'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }, 'Claimer'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, 'Approval Count'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'Approve'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      }, 'Finalize'))), _react2.default.createElement(Body, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }, this.renderRows())), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, 'Found ', this.props.claimCount, ' claims.'));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var address, insurancePool, claimCount, validatorsCount, claims;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                address = props.query.address;
                insurancePool = (0, _insurancePool2.default)(address);
                _context.next = 4;
                return insurancePool.methods.getClaimsCount().call();

              case 4:
                claimCount = _context.sent;
                _context.next = 7;
                return insurancePool.methods.validatorsCount().call();

              case 7:
                validatorsCount = _context.sent;
                _context.next = 10;
                return _promise2.default.all(Array(parseInt(claimCount)).fill().map(function (element, index) {
                  return insurancePool.methods.claims(index).call();
                }));

              case 10:
                claims = _context.sent;
                return _context.abrupt('return', { address: address, claims: claims, claimCount: claimCount, validatorsCount: validatorsCount });

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return ClaimIndex;
}(_react.Component);

exports.default = ClaimIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2xhaW1JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyUm93cyIsIl90aGlzMiIsInByb3BzIiwiY2xhaW1zIiwibWFwIiwiY2xhaW0iLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJ2YWxpZGF0b3JzQ291bnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJlbmRlciIsIkhlYWRlciIsIlJvdyIsIkhlYWRlckNlbGwiLCJCb2R5Iiwicm91dGUiLCJwcmltYXJ5IiwiZmxvYXRlZCIsInN0eWxlIiwibWFyZ2luQm90dG9tIiwiY2xhaW1Db3VudCIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsImluc3VyYW5jZVBvb2wiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicXVlcnkiLCJtZXRob2RzIiwiZ2V0Q2xhaW1zQ291bnQiLCJjYWxsIiwic2VudCIsImFsbCIsIkFycmF5IiwicGFyc2VJbnQiLCJmaWxsIiwiZWxlbWVudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFOQSxJQUFJQSxlQUFlLCtFQUFuQjs7O0FBUUEsSUFBSUMsYUFBYSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3JDLDBCQUFVRCxVQUFWLEVBQXNCQyxVQUF0Qjs7QUFFQSxXQUFTRCxVQUFULEdBQXNCO0FBQ3BCLGtDQUFnQixJQUFoQixFQUFzQkEsVUFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMs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