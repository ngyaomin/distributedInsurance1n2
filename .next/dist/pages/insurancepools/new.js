'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

var _uploady = require('@rpldy/uploady');

var _uploady2 = _interopRequireDefault(_uploady);

var _uploadButton = require('@rpldy/upload-button');

var _uploadButton2 = _interopRequireDefault(_uploadButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/pages/insurancepools/new.js?entry'; // link not use now, maybe use later, i lazy so put here


var InsurancePoolNew = function (_Component) {
  (0, _inherits3.default)(InsurancePoolNew, _Component);

  function InsurancePoolNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, InsurancePoolNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = InsurancePoolNew.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      minimumPremium: '',
      errorMessage: '',
      documentHash: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.createInsurancePool(_this.state.minimumPremium, _this.state.documentHash).send({
                  from: accounts[0]
                });

              case 8:

                _routes.Router.pushRoute('/');

                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](2);

                _this.setState({ errorMessage: _context.t0.message });

              case 14:

                _this.setState({ loading: false });

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(InsurancePoolNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return (
        // right now we are doing the case where few requesters can request same insurance
        // if the case of few providers providing same insurance than we will set up a
        // min payout
        // the mechanics will be complex, but for now we keep this simple

        _react2.default.createElement(_Layout2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 48
          }
        }, _react2.default.createElement('h3', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        }, 'Create a new insurance pool offer'), _react2.default.createElement(_uploady2.default, { destination: { url: "https://fakeuploaddrive.fake" }, __source: {
            fileName: _jsxFileName,
            lineNumber: 51
          }
        }, _react2.default.createElement(_uploadButton2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 52
          }
        }), ' Upload Supporting Files Here (for demo only real upload server cant afford )'), _react2.default.createElement('br', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        }), _react2.default.createElement('br', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        }), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
            fileName: _jsxFileName,
            lineNumber: 56
          }
        }, _react2.default.createElement(_semanticUiReact.Form.Field, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 57
          }
        }, _react2.default.createElement('label', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        }, ' Minimum Premium'), _react2.default.createElement(_semanticUiReact.Input, {
          label: 'wei',
          labelPosition: 'right',
          value: this.state.minimumPremium,
          onChange: function onChange(event) {
            return _this3.setState({ minimumPremium: event.target.value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 59
          }
        })), _react2.default.createElement(_semanticUiReact.Form.Field, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        }, _react2.default.createElement('label', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        }, ' Document Hashes (will be automated in next upgrade)'), _react2.default.createElement(_semanticUiReact.Input, {
          label: 'Hash',
          labelPosition: 'right',
          value: this.state.documentHash,
          onChange: function onChange(event) {
            return _this3.setState({ documentHash: event.target.value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          }
        })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Opps!', content: this.state.errorMessage, __source: {
            fileName: _jsxFileName,
            lineNumber: 77
          }
        }), _react2.default.createElement(_semanticUiReact.Button, {
          loading: this.state.loading,
          primary: true, __source: {
            fileName: _jsxFileName,
            lineNumber: 78
          }
        }, 'Offer a new pool')))
      );
    }
  }]);

  return InsurancePoolNew;
}(_react.Component);

exports.default = InsurancePoolNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbE5ldyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwibWluaW11bVByZW1pdW0iLCJlcnJvck1lc3NhZ2UiLCJkb2N1bWVudEhhc2giLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZUluc3VyYW5jZVBvb2wiLCJzZW5kIiwiZnJvbSIsInB1c2hSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZGVzdGluYXRpb24iLCJ1cmwiLCJlcnJvciIsIkZpZWxkIiwibGFiZWwiLCJsYWJlbFBvc2l0aW9uIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJoZWFkZXIiLCJjb250ZW50IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQVJBLElBQUlBLGVBQWUsc0VBQW5CLEMsQ0FNdUM7OztBQUl2QyxJQUFJQyxtQkFBbUIs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