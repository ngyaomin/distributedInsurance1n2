'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

var _uploady = require('@rpldy/uploady');

var _uploady2 = _interopRequireDefault(_uploady);

var _uploadButton = require('@rpldy/upload-button');

var _uploadButton2 = _interopRequireDefault(_uploadButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/pages/insurancepools/new.js?entry'; // link not use now, maybe use later, i lazy so put here


var InsurancePoolNew = function (_Component) {
  (0, _inherits3.default)(InsurancePoolNew, _Component);

  function InsurancePoolNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, InsurancePoolNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = InsurancePoolNew.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      minimumPremium: '',
      errorMessage: '',
      documentHash: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.createInsurancePool(_this.state.minimumPremium, _this.state.documentHash).send({
                  from: accounts[0]
                });

              case 8:

                _routes.Router.pushRoute('/');

                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](2);

                _this.setState({ errorMessage: _context.t0.message });

              case 14:

                _this.setState({ loading: false });

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(InsurancePoolNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return (
        // right now we are doing the case where few requesters can request same insurance
        // if the case of few providers providing same insurance than we will set up a
        // min payout
        // the mechanics will be complex, but for now we keep this simple
        _react2.default.createElement(_Layout2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        }, _react2.default.createElement('h3', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 48
          }
        }, 'Create a new insurance pool offer'), _react2.default.createElement(_uploady2.default, { destination: { url: "https://fakeuploaddrive.fake" }, __source: {
            fileName: _jsxFileName,
            lineNumber: 50
          }
        }, _react2.default.createElement(_uploadButton2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 51
          }
        }), ' Upload Supporting Files Here (for demo only real upload server cant afford )'), _react2.default.createElement('br', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 53
          }
        }), _react2.default.createElement('br', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 53
          }
        }), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
            fileName: _jsxFileName,
            lineNumber: 55
          }
        }, _react2.default.createElement(_semanticUiReact.Form.Field, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 56
          }
        }, _react2.default.createElement('label', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 57
          }
        }, ' Minimum Premium'), _react2.default.createElement(_semanticUiReact.Input, {
          label: 'wei',
          labelPosition: 'right',
          value: this.state.minimumPremium,
          onChange: function onChange(event) {
            return _this3.setState({ minimumPremium: event.target.value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        })), _react2.default.createElement(_semanticUiReact.Form.Field, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66
          }
        }, _react2.default.createElement('label', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        }, ' Document Hashes (will be automated in next upgrade)'), _react2.default.createElement(_semanticUiReact.Input, {
          label: 'Hash',
          labelPosition: 'right',
          value: this.state.documentHash,
          onChange: function onChange(event) {
            return _this3.setState({ documentHash: event.target.value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Opps!', content: this.state.errorMessage, __source: {
            fileName: _jsxFileName,
            lineNumber: 76
          }
        }), _react2.default.createElement(_semanticUiReact.Button, {
          loading: this.state.loading,
          primary: true, __source: {
            fileName: _jsxFileName,
            lineNumber: 77
          }
        }, 'Offer a new pool')))
      );
    }
  }]);

  return InsurancePoolNew;
}(_react.Component);

exports.default = InsurancePoolNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbE5ldyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwibWluaW11bVByZW1pdW0iLCJlcnJvck1lc3NhZ2UiLCJkb2N1bWVudEhhc2giLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZUluc3VyYW5jZVBvb2wiLCJzZW5kIiwiZnJvbSIsInB1c2hSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZGVzdGluYXRpb24iLCJ1cmwiLCJlcnJvciIsIkZpZWxkIiwibGFiZWwiLCJsYWJlbFBvc2l0aW9uIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJoZWFkZXIiLCJjb250ZW50IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQVJBLElBQUlBLGVBQWUsc0VBQW5CLEMsQ0FNdUM7OztBQUl2QyxJQUFJQyxtQkFBbUIs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