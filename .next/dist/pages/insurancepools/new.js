'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/pages/insurancepools/new.js?entry';
// link not use now, maybe use later, i lazy so put here

var InsurancePoolNew = function (_Component) {
  (0, _inherits3.default)(InsurancePoolNew, _Component);

  function InsurancePoolNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, InsurancePoolNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = InsurancePoolNew.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      minimumPremium: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.createInsurancePool(_this.state.minimumPremium).send({
                  from: accounts[0]
                });

              case 8:

                _routes.Router.pushRoute('/');

                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](2);

                _this.setState({ errorMessage: _context.t0.message });

              case 14:

                _this.setState({ loading: false });

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(InsurancePoolNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return (
        // right now we are doing the case where few requesters can request same insurance
        // if the case of few providers providing same insurance than we will set up a
        // min payout
        // the mechanics will be complex, but for now we keep this simple
        _react2.default.createElement(_Layout2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 44
          }
        }, _react2.default.createElement('h3', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 45
          }
        }, 'Create a new insurance pool offer'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        }, _react2.default.createElement(_semanticUiReact.Form.Field, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 48
          }
        }, _react2.default.createElement('label', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        }, ' Minimum Premium'), _react2.default.createElement(_semanticUiReact.Input, {
          label: 'wei',
          labelPosition: 'right',
          value: this.state.minimumPremium,
          onChange: function onChange(event) {
            return _this3.setState({ minimumPremium: event.target.value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 50
          }
        })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Opps!', content: this.state.errorMessage, __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        }), _react2.default.createElement(_semanticUiReact.Button, {
          loading: this.state.loading,
          primary: true, __source: {
            fileName: _jsxFileName,
            lineNumber: 59
          }
        }, 'Offer a new pool')))
      );
    }
  }]);

  return InsurancePoolNew;
}(_react.Component);

exports.default = InsurancePoolNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbE5ldyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwibWluaW11bVByZW1pdW0iLCJlcnJvck1lc3NhZ2UiLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZUluc3VyYW5jZVBvb2wiLCJzZW5kIiwiZnJvbSIsInB1c2hSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZXJyb3IiLCJGaWVsZCIsImxhYmVsIiwibGFiZWxQb3NpdGlvbiIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwiaGVhZGVyIiwiY29udGVudCIsInByaW1hcnkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQU5BLElBQUlBLGVBQWUsc0VBQW5CO0FBTXVDOztBQUV2QyxJQUFJQyxtQkFBbUIsVUFBVUMsVUFBVixFQUFzQjtBQUMzQywwQkFBVUQsZ0JBQVYsRUFBNEJDLFVBQTVCOztBQUVB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