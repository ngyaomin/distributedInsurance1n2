'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _insurancePool = require('../../ethereum/insurancePool');

var _insurancePool2 = _interopRequireDefault(_insurancePool);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _FundForm = require('../../components/FundForm');

var _FundForm2 = _interopRequireDefault(_FundForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/pages/insurancepools/show.js?entry';


var InsurancePoolShow = function (_Component) {
  (0, _inherits3.default)(InsurancePoolShow, _Component);

  function InsurancePoolShow() {
    (0, _classCallCheck3.default)(this, InsurancePoolShow);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolShow.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolShow, [{
    key: 'renderCards',
    value: function renderCards() {
      var _props = this.props,
          balance = _props.balance,
          manager = _props.manager,
          minimumPremium = _props.minimumPremium,
          claimsCount = _props.claimsCount,
          validatorsCount = _props.validatorsCount;

      var items = [{
        header: manager,
        meta: 'Address of manager',
        description: 'Manager create this pool and can create claims on behalf of',
        style: { overflowWrap: 'break-word' }
      }, {
        header: minimumPremium,
        meta: 'Minimum Premium in weis',
        description: 'To be insured you must contribute at least this much wei, also to become validator'
      }, {
        header: claimsCount,
        meta: 'Number of Claims',
        description: 'Number of claims so far on this insurance pools. Claims must be validated by validators'
      }, {
        header: validatorsCount,
        meta: 'Number of validators',
        description: 'Number of ppl that funded this pool and can act as validators'
      }, {
        header: _web2.default.utils.fromWei(balance, 'ether'),
        meta: 'Insurance Pool Balance(ether)',
        description: 'How much fund this pool has left'
      }];

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 63
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, 'Insurance Pool Show'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 72
        }
      }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, _react2.default.createElement(_FundForm2.default, { address: this.props.address, __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 81
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }, _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + this.props.address + '/claims', __source: {
          fileName: _jsxFileName,
          lineNumber: 83
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      }, 'View Claims')))))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var insurancePool, detail;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                insurancePool = (0, _insurancePool2.default)(props.query.address);
                _context.next = 3;
                return insurancePool.methods.getDetail().call();

              case 3:
                detail = _context.sent;
                return _context.abrupt('return', {
                  address: props.query.address,
                  minimumPremium: detail[0],
                  balance: detail[1],
                  claimsCount: detail[2],
                  validatorsCount: detail[3],
                  manager: detail[4]
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolShow;
}(_react.Component);

exports.default = InsurancePoolShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbFNob3ciLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlckNhcmRzIiwiX3Byb3BzIiwicHJvcHMiLCJiYWxhbmNlIiwibWFuYWdlciIsIm1pbmltdW1QcmVtaXVtIiwiY2xhaW1zQ291bnQiLCJ2YWxpZGF0b3JzQ291bnQiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwidXRpbHMiLCJmcm9tV2VpIiwiY3JlYXRlRWxlbWVudCIsIkdyb3VwIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZW5kZXIiLCJSb3ciLCJDb2x1bW4iLCJ3aWR0aCIsImFkZHJlc3MiLCJyb3V0ZSIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJpbnN1cmFuY2VQb29sIiwiZGV0YWlsIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldERldGFpbCIsImNhbGwiLCJzZW50IiwiYWJydXB0Iiwic3RvcCIsImdldEluaXRpYWxQcm9wcyIsIl94Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQVBBLElBQUlBLGVBQWUsdUVBQW5COzs7QUFTQSxJQUFJQyxvQkFBb0IsVUFBVUMsVUFBVixFQUFzQjtBQUM1QywwQkFBVUQsaUJBQVYsRUFBNkJDLFVBQTdCOztBQUVBLFdBQVNELGlCQUFULEdBQTZCO0FBQzNCLGtDQUFnQixJQUFoQixFQUFzQkEsaUJBQXRCOztBQUVBLFdBQU8s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